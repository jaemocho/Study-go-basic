1. Go Routine

    메인함수도 고루틴 - 메인 고루틴이라고 부른다. 

    새로운 고루틴은 단순히 go 함수_호출로 만든다.

    go 함수_호출


2. 서브 고루틴이 종료 될 때까지 대기 
    sync.WaitGroup 를 이용 

    var wg sync.WaitGroup
    wg.Add(3)       // 작업 개수 설정
    wg.Done()       // 작업이 완료될 때마다 호출
    wg.Wait()       // 모든 작업이 완료될 때까지 대기 


3. 고루틴 동작원리 
    고루틴은 os쓰레드를 이용하는 경량 쓰레드(light weight thread)이다. 
    고루틴 != 쓰레드 
    고루틴 -> 쓰레드를 이용한다. 

    고루틴이 생성되면 os스레드에 매핑된다. 

    코어 2개 고루틴 3개 

    [코어1] - [os 쓰레드 1] - [고루틴 1]
    [코어2] - [os 쓰레드 2] - [고루틴 2]

    [고루틴3] (대기) -> 먼저 끝나는 쪽으로 매핑 

4. 시스템 콜 호출 시 
    파일 읽기/쓰기, 네트워크 읽기/쓰기 같은 시스템 콜로 대기 상태가 되었을 때 
    대기하고 있던 다른 고루틴과 교체되어 먼저 수행된다. 

    아무리 많은 고루틴을 생성해도 컨텍스트 스위칭 비용이 발생하지 않는다. 
    
    [코어1] - [쓰레드1]
    [코어2] - [쓰레드2]
    
    위 와 같은 형태이기 때문에 os상에서 컨텍스트 스위칭이 일어나지 않는다 

5. 동시성 프로그래밍(concurrent programming)의 주의점 , 뮤텍스 
    동일한 메모리 자원을 여러 고루틴에서 접근할 때 동시성 문제가 발생한다. 

    어떻게 해결해야 하는가 ?

    메모리 자우너을 하나의 고루틴에서만 접근하게 해야 한다. 
    how ?
    가장 심플한 접근법은 lock를 사용하는 것이다. 
    이것을 뮤텍스(Mutual Exclusion - 상호 배제) 이라고 한다. 


    func DepositAndWithdraw(account *Account) {
	mutex.Lock() // 자원에 접근하는 함수에서 lock을 걸고 
	defer mutex.Unlock() // 완료 후 unlock
	if account.Balance < 0 {
		panic(fmt.Sprintf("Balance should not be negative value: %d", account.Balance))
	}
	account.Balance += 1000
	time.Sleep(time.Millisecond)
	account.Balance -= 1000
}


6. 뮤텍스의 문제점
    1. 동시성 프로그래밍으로 인한 성능 향상을 얻을 수 없다.  => 나머지 자원을 선점하지 못한 groutine 들이 대기 상태이기 때문에 
        심지어 과도한 락킹으로 성능이 하락되기도 한다.  => lock을 획득 하고 반환하는 부분도 자원을 사용한다 

    2. 데드락 문제가 발생할 수 있다. 
       모든 고루틴이 잠들어있으면 DeadLock으로 알려준다. 
       예제 ex24.5

7. 결론적으로 

    뮤텍스는 매우 조심히 사용해야 한다. 
    그럼 아예 뮤텍스를 쓰지 않아야할까? - 그건..아니다 .

8. 또 다른 자원관리 기법

    1. 영역을 나누는 방법 
        ex24.6
    2. 역할을 나누는 방법