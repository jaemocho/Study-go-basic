1. slice
    go에서 제공하는 동적 배열 타입 (x)
    go에서 제공하는 배열을 가리키는 포인터 타입 (o)

    정적 -> static -> Compile time, build LastWriteTime
    동적 -> dynamic -> Runtime 

    상수 (정적)
    const pi = 3.14 // compile time, build time 에 값이 고정 
    변수 (동적)
    var p = 3.14 // 실행도중에 얼마든지 바뀔 수 있다

    var slice []int

2. Make() 를 이용한 초기화
    내장 함수 slice, map 만들때 많이 사용 

    make(type, 요소 개수)
    var slice = make([]int, 3)

3. 슬라이스 순회하면서
    var slice []int{1,2,3}

    // len 으로 순회
    for i := 0; i < len(slice); i++ {
        slice[i] += 10
    }

    // range 로 순회
    for i, v := range slice {
        slice[i] = v * 2
    }

4. 슬라이스 요소 추가 append()
    새로운 slice를 만들어서 반환 하는 형식 

    var slice = []int{1,2,3}

    slice2 := append(slice, 4)

    slice := apppend(slice,4,5,6,7)

5. 슬라이스 동작 원리 

    실제 배열이 따로 있고 그걸 가르키고 있다 

    type SliceHeader struct {
        Data uintptr    // 실제 배열을 가리키는 포인터
        Len int         // 요소 개수
        Cap int         // 실제 배열의 길이 capacity
    }

    // make(type, len, cap)
    var slice2 = make([]int,3,5)

6. append() 동작 원리 

    append()는 슬라이스에 요소를 추가한 새로운 슬라이스를 반환 

    - 기존 슬라이스가 바뀔 수도 있고 아닐수도 있다 
    새로안만들고 기존 슬라이스에 추가된 값을 넣어서 반환할 수도 있다 

    slice := []int{1,2,3}
    slice2 := append(slice, 4)

    빈공간이 충분한가 ? yes 빈공간에 요소 추가 (기존 배열)
                    no 새로운 배열할당 -> 복사 -> 요소 추가  (새로운 배열)

    빈 공간 : cap -len 

        slice = make([]int,3,5)
        slice2 := append(slice, 4)

    ※ 위와 같이 빈 공 간이 있는 경우  slice2[2] = 100 이런식으로 변경하면 slice[2]도 바뀌어있으니 유의 

7. 슬라이싱 사용법

    array[startidx:endidx]

    arr :=[7]int

    ex) arr[1:5] => 1 2 3 4

    SliceHeader

    data : 1을 가르킨다 
    len : 4 
    cap : 5 ( 자르기전 최대 크기 - 시작지점 )

    slice[0:3] // 0~2까지 
    slice[:3] // 0~2까지 (생략가능)

    slice[2:len(slice)] // 2 ~ 끝까지
    slice[2:]  // 2 ~ 끝까지 (생략가능)

    slice[시작인덱스: 끝인덱스 : 최대인덱스]
                                cap size

    ex ) slice1 := []int{1,2,3,4,5}
        slice2 := slice1[1:3:4]
        data 는 2를 가르키고 
        len 2 cap 3

8. 슬라이스 복사 

    slice1 := []int{1,2,3,4,5}

    // 순회해서 복사 
    slice2 := make([]int, len(slice1))
    for i, v l= range slice {
        slice2[i] = value
    }


    // slice1... 가변인자, 전체를 의미 
    // 아래와 같이 복사해도 된다 
    slice2 := append([]int{}, slice1...)


    // copy를 이용해서 복사도 가능 , 복사라는게 명확해보여서 선호
    slice2 := make([]int, len(slice1))
    copy(slice2, slice1)

9. 요소 삭제 
    
    slice = append(slice[:idx], slice[idx+1:]...)
    
    copy(slice[:idx], slice[idx+1:]...)
    slice = slice[:len(slice)-1]
  
10. 요소 삽입

    // 넣고 싶은 idx 전까지에서 시작
    // 하나짜리 신규 slice생성 
    // 위에서 생성한 slice 에 기존 slice 끝까지 append
    // 1번에 3번 append
    slice = append(slice[:idx], append([]int{100}, slice[idx:]...)...)

    slice = append(slice, 0)
    copy(slice[idx+1:], slice[idx:])
    slice[idx] = 100

11. slice 정렬

    "sort" package 사용
    
    sort.Ints(slice)


12. struct slice 정렬 

type Student struct {
    Name string
    Age int
}

type Students []Student

func (s Students) Len() int { return  len(s)}
func (s Students) Less(i,j int) bool { return s[i].Age < s[j].Age }
func (s Students) Swap(i,j int) { s[i], s[j] = s[j], s[i]}

위와 같이 interface 에 속한 method 구현해주면

sort.Sort(s) 가능 
