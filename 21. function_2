1. 가변 인수 함수 
    func sum(nums ...int) int {

    }

    // 모든 type을 받고 싶은경우  interface로 가변인자로 받고  switch 문으로 구분 

    func sum(a ...interface{}) 

    for _, v := range a {
        switch t := v.(type) {
        case int:
            fmt.Printf("v is int %d\n", int(t))
        case float64:
            fmt.Printf("v is float64 %f\n", float64(t))
        case string:
            fmt.Printf("v is string %s\n", string(t))
        default:
            fmt.Printf("Not supported type %T:%v\n", t, t)
	}
	}

    

2. defer 지연 실행 

    함수 종료 전에 실행을 보장 
    
    주로 os 자원을 반납해야 할 때 사용 


3. 함수 타입 변수 

    함수를 값으로 갖는 변수 
    ex) 

    func add(a, b int) int {
	return a + b
    }

    func mul(a, b int) int {
        return a * b
    }

    // 함수 type
    func getOperator(op string) func(int, int) int {
        if op == "+" {
            return add
        } else if op == "*" {
            return mul
        } else {
            return nil
        }
    }

    //별칭 타입
    type OpFn func(int, int) int

    func main() {
        var operator OpFn
        operator = getOperator("+")

        var result = operator(3, 4)
        fmt.Println(result)
    }

4. 함수 리터럴(람다)
    func add(a,b int) int {
        return a+b
    }

    // 함수의 리터럴
    f := func(a,b int) int {
        return a+b
    }

    일반 함수는 상태를 가질 수 없지만 함수 리터럴은 내부 상태를 가질 수 있다

    // 아래와 같은 function 은 있을 수 없다 (i 가 선언된 곳이 없음)
    func aaa() {
        i += 10
    }

    // 아래와 같이 외부의 변수를 가져와서(주소 캡쳐) 사용할 수 있다 
    func main() {
        i := 10

        f := func() {

        i += 10
        }   
        i++
        f()  // 결과는 11 
    }

    ※ 주의 할 점 
    주소값을 기준으로 동작하기 때문에 원하지 않는 값이 나올 수 있다(go 루틴 사용할 때 문제가 될 수 있다 )
    0 1 2 가 출력되어야할 것 같지만 3 3 3 이 호출된다 
    0 1 2 가 나오려면 println 하기전 새로운 변수에 복사해놓고 사용 

    // 3개의 slice func 생성 
    f := make([]func(), 3)

    fmt.Println("valueLoop")
    
    // i를 출력하는 함수 리터럴, i는 여기서 3까지 진행(주소 기반)
    i := 0
    for ; i < 3; i++ {
        f[i] = func() {
            fmt.Println(i)
        }
    }

    //i == 3

    for i:= 0; i<3; i++ {
        f[i]()
    }

    //출력결과 
    3
    3
    3

5. 의존성 주입 

    type Writer func(string)

    // 의존성 주입, 어떤 function이 와도 hello world를 쓰겠다
    func writeHello(writer Writer) {
        writer("Hello world")
    }

    func main() {
        f, err := os.Create("text.txt")
        if err != nil {
            fmt.Println("Failed to create a file")
            return
        }

        defer f.Close()

        writeHello(func(msg string) {
            fmt.Fprintln(f, msg)
        })
    }     